# Generated by Django 4.2 on 2024-02-07 12:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def populate_SectorCompanyContact(apps, schema_editor):
    SectorContact = apps.get_model("governanceplatform", "SectorContact")
    Company = apps.get_model("governanceplatform", "Company")
    CompanyUser = apps.get_model("governanceplatform", "CompanyUser")
    SectorCompanyContact = apps.get_model("governanceplatform", "SectorCompanyContact")
    objs = []

    if SectorContact.objects.all().count() > 0:
        for contact in SectorContact.objects.all():
            for company in Company.objects.filter(sectors=contact.sector):
                for company_user in CompanyUser.objects.filter(company=company, user=contact.user):
                    objs.append(
                        SectorCompanyContact(
                            user=contact.user,
                            sector=contact.sector,
                            is_sector_contact=contact.is_sector_contact,
                            company=company,
                            is_company_administrator=company_user.is_company_administrator,
                        )
                    )

        SectorCompanyContact.objects.bulk_create(objs)


def populate_RegulatorsSectors(apps, schema_editor):
    User = apps.get_model("governanceplatform", "User")
    RegulatorUser = apps.get_model("governanceplatform", "RegulatorUser")

    if RegulatorUser.objects.all().count() > 0:
        for regulatoruser in RegulatorUser.objects.all():
            user = None
            user = User.objects.filter(pk=regulatoruser.id).first()
            if user is not None:
                sectors = user.sectors.all()
                if sectors.count() > 0:
                    for sector in sectors:
                        if not regulatoruser.sectors.filter(pk=sector.id).exists():
                            regulatoruser.sectors.add(sector.id)


class Migration(migrations.Migration):

    dependencies = [
        ("governanceplatform", "0007_sector_creator_sector_creator_name"),
        ("two_factor", "0009_initial"),
        ("incidents", "0022_impact_creator_impact_creator_name_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="SectorCompanyContact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_sector_contact",
                    models.BooleanField(default=False, verbose_name="Contact person"),
                ),
                (
                    "is_company_administrator",
                    models.BooleanField(default=False, verbose_name="is administrator"),
                ),
            ],
            options={
                "verbose_name": "Sector contact",
                "verbose_name_plural": "Sectors contact",
            },
        ),
        migrations.AddField(
            model_name="sectorcompanycontact",
            name="company",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="governanceplatform.company",
            ),
        ),
        migrations.AddField(
            model_name="sectorcompanycontact",
            name="sector",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="governanceplatform.sector",
            ),
        ),
        migrations.AddField(
            model_name="sectorcompanycontact",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.RunPython(populate_SectorCompanyContact, migrations.RunPython.noop),
        migrations.AddField(
            model_name="regulatoruser",
            name="sectors",
            field=models.ManyToManyField(to="governanceplatform.sector"),
        ),
        migrations.RunPython(populate_RegulatorsSectors, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="sectorcontact",
            name="sector",
        ),
        migrations.RemoveField(
            model_name="sectorcontact",
            name="user",
        ),
        migrations.RemoveField(
            model_name="company",
            name="sectors",
        ),
        migrations.AlterField(
            model_name="regulator",
            name="email_for_notification",
            field=models.EmailField(
                blank=True,
                default=None,
                max_length=254,
                null=True,
                verbose_name="email address for incident notification",
            ),
        ),
        migrations.AddField(
            model_name="company",
            name="sector_contacts",
            field=models.ManyToManyField(
                through="governanceplatform.SectorCompanyContact",
                to="governanceplatform.sector",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="companies",
            field=models.ManyToManyField(
                through="governanceplatform.SectorCompanyContact",
                to="governanceplatform.company",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="sectors",
            field=models.ManyToManyField(
                through="governanceplatform.SectorCompanyContact",
                to="governanceplatform.sector",
            ),
        ),
        migrations.AddConstraint(
            model_name="sectorcompanycontact",
            constraint=models.UniqueConstraint(
                fields=("user", "sector", "company"), name="unique_SectorCompanyContact"
            ),
        ),
    ]
